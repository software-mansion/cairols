//! > Test find references of a trait.

//! > test_runner_name
test_references(include_declaration: true)

//! > cairo_code
pub trait ShapeGeometry<T> {
    fn area(self: T) -> u64;
}

mod rectangle {
    use super::Sha<caret>peGeometry;

    #[derive(Copy, Drop)]
    pub struct Rectangle {}

    impl RectangleGeometry of ShapeGe<caret>ometry<Rectangle> {
        fn area(self: Rectangle) -> u64 { 0 }
    }
}

use rectangle::Rectangle;

fn main() {
    let rect = Rectangle {};
    let area = ShapeGeo<caret>metry::area(rect);
}

//! > References #0
    use super::Sha<caret>peGeometry;
---
<sel>pub trait ShapeGeometry<T> {
    fn area(self: T) -> u64;
}</sel>
pub trait <sel>ShapeGeometry</sel><T> {
    use super::<sel>ShapeGeometry</sel>;
    impl RectangleGeometry of <sel>ShapeGeometry</sel><Rectangle> {
    let area = <sel>ShapeGeometry</sel>::area(rect);

//! > References #1
    impl RectangleGeometry of ShapeGe<caret>ometry<Rectangle> {
---
<sel>pub trait ShapeGeometry<T> {
    fn area(self: T) -> u64;
}</sel>
pub trait <sel>ShapeGeometry</sel><T> {
    use super::<sel>ShapeGeometry</sel>;
    impl RectangleGeometry of <sel>ShapeGeometry</sel><Rectangle> {
    let area = <sel>ShapeGeometry</sel>::area(rect);

//! > References #2
    let area = ShapeGeo<caret>metry::area(rect);
---
<sel>pub trait ShapeGeometry<T> {
    fn area(self: T) -> u64;
}</sel>
pub trait <sel>ShapeGeometry</sel><T> {
    use super::<sel>ShapeGeometry</sel>;
    impl RectangleGeometry of <sel>ShapeGeometry</sel><Rectangle> {
    let area = <sel>ShapeGeometry</sel>::area(rect);
