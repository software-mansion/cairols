//! > Test references of variables.

//! > test_runner_name
test_references

//! > cairo_code
fn main() {
    let foo<caret>bar = 1233; // bad
    let x = foo<caret>bar + 1; // good
    bar();
    let y = x + foobar * foobar; // good
}

fn bar() {
    let foobar = 42; // bad
}

//! > References #0
    let foo<caret>bar = 1233; // bad
none response

//! > References #1
    let x = foo<caret>bar + 1; // good

DECLARATIONS:
    let <sel>foobar</sel> = 1233; // bad

USAGES:
    let x = <sel>foobar</sel> + 1; // good
    let y = x + <sel>foobar</sel> * foobar; // good
    let y = x + foobar * <sel>foobar</sel>; // good

//! > ==========================================================================

//! > Test references of variable declared via a complex pattern.

//! > test_runner_name
test_references

//! > cairo_code
fn main() {
    let (foobar, foobar2) = (1, 2); // good
    let x = foo<caret>bar + foobar2; // good
    let y = foobar2 * foobar2; // bad
    let z = foobar2 + foobar; // good
}

//! > References #0
    let x = foo<caret>bar + foobar2; // good

DECLARATIONS:
    let (<sel>foobar</sel>, foobar2) = (1, 2); // good

USAGES:
    let x = <sel>foobar</sel> + foobar2; // good
    let z = foobar2 + <sel>foobar</sel>; // good

//! > ==========================================================================

//! > Test references of variable captured by a closure;

//! > test_runner_name
test_references

//! > cairo_code
fn main() {
    let foobar = 1;
    let x = foo<caret>bar + 1;
    let f = |y| x + y + foo<caret>bar;
}

//! > References #0
    let x = foo<caret>bar + 1;

DECLARATIONS:
    let <sel>foobar</sel> = 1;

USAGES:
    let x = <sel>foobar</sel> + 1;
    let f = |y| x + y + <sel>foobar</sel>;

//! > References #1
    let f = |y| x + y + foo<caret>bar;

DECLARATIONS:
    let <sel>foobar</sel> = 1;

USAGES:
    let x = <sel>foobar</sel> + 1;
    let f = |y| x + y + <sel>foobar</sel>;
