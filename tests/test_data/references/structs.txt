//! > Test find references of a struct.

//! > test_runner_name
test_references

//! > cairo_code
struct Fo<caret>o {
    field: felt252,
}

fn main() {
    let foo = Fo<caret>o { field: 0 };
    let foobar: Fo<caret>o = foo;
}

fn calc(foo: Fo<caret>o) {}

mod rectangle {
    use super::Fo<caret>o;
}

//! > References #0
struct Fo<caret>o {

DECLARATIONS:
<sel>struct Foo {
    field: felt252,
}</sel>

USAGES:
struct <sel>Foo</sel> {
    let foo = <sel>Foo</sel> { field: 0 };
    let foobar: <sel>Foo</sel> = foo;
fn calc(foo: <sel>Foo</sel>) {}
    use super::<sel>Foo</sel>;

//! > References #1
    let foo = Fo<caret>o { field: 0 };

DECLARATIONS:
<sel>struct Foo {
    field: felt252,
}</sel>

USAGES:
struct <sel>Foo</sel> {
    let foo = <sel>Foo</sel> { field: 0 };
    let foobar: <sel>Foo</sel> = foo;
fn calc(foo: <sel>Foo</sel>) {}
    use super::<sel>Foo</sel>;

//! > References #2
    let foobar: Fo<caret>o = foo;

DECLARATIONS:
<sel>struct Foo {
    field: felt252,
}</sel>

USAGES:
struct <sel>Foo</sel> {
    let foo = <sel>Foo</sel> { field: 0 };
    let foobar: <sel>Foo</sel> = foo;
fn calc(foo: <sel>Foo</sel>) {}
    use super::<sel>Foo</sel>;

//! > References #3
fn calc(foo: Fo<caret>o) {}

DECLARATIONS:
<sel>struct Foo {
    field: felt252,
}</sel>

USAGES:
struct <sel>Foo</sel> {
    let foo = <sel>Foo</sel> { field: 0 };
    let foobar: <sel>Foo</sel> = foo;
fn calc(foo: <sel>Foo</sel>) {}
    use super::<sel>Foo</sel>;

//! > References #4
    use super::Fo<caret>o;

DECLARATIONS:
<sel>struct Foo {
    field: felt252,
}</sel>

USAGES:
struct <sel>Foo</sel> {
    let foo = <sel>Foo</sel> { field: 0 };
    let foobar: <sel>Foo</sel> = foo;
fn calc(foo: <sel>Foo</sel>) {}
    use super::<sel>Foo</sel>;
