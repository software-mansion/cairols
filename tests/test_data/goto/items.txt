//! > Test goto definition of a function.

//! > test_runner_name
test_goto_definition

//! > cairo_code
fn main() {
    fo<caret>o();
}

fn foo() {} // good

mod bar {
    fn foo() {} // bad
}

//! > Goto definition #0
    fo<caret>o();
---
<sel>fn foo() {}</sel> // good

//! > ==========================================================================

//! > Test goto definition of a struct.

//! > test_runner_name
test_goto_definition

//! > cairo_code
struct Foo {
    field: felt252,
}

fn main() {
    let foo = Fo<caret>o { field: 0 };
}

fn calc(foo: Fo<caret>o) {}

//! > Goto definition #0
    let foo = Fo<caret>o { field: 0 };
---
<sel>struct Foo {
    field: felt252,
}</sel>

//! > Goto definition #1
fn calc(foo: Fo<caret>o) {}
---
<sel>struct Foo {
    field: felt252,
}</sel>

//! > ==========================================================================

//! > Test goto definition of an enum.

//! > test_runner_name
test_goto_definition

//! > cairo_code
enum Foo {
    Bar,
    Baz,
}

fn main() {
    let foo = Fo<caret>o::Bar;
}

fn calc(foo: Fo<caret>o) {}

//! > Goto definition #0
    let foo = Fo<caret>o::Bar;
---
<sel>enum Foo {
    Bar,
    Baz,
}</sel>

//! > Goto definition #1
fn calc(foo: Fo<caret>o) {}
---
<sel>enum Foo {
    Bar,
    Baz,
}</sel>

//! > ==========================================================================

//! > Test goto definition with traits.

//! > test_runner_name
test_goto_definition

//! > cairo_code
pub trait ShapeGeometry<T> {
    fn boundary(self: T) -> u64;
    fn area(self: T) -> u64;
}

mod rectangle {
    use super::Sha<caret>peGeometry;

    #[derive(Copy, Drop)]
    pub struct Rectangle {
        pub height: u64,
        pub width: u64,
    }

    impl RectangleGeometry of ShapeGe<caret>ometry<Recta<caret>ngle> {
        fn boun<caret>dary(self: Recta<caret>ngle) -> u64 {
            2 * (self.height + self.width)
        }
        fn area(self: Rectangle) -> u64 {
            self.height * self.width
        }
    }
}

use rectangle::Rectangle;

fn main() {
    let rect = Rectangle { height: 5, width: 7 };
    let area = ShapeGeo<caret>metry::ar<caret>ea(rect);
}

//! > Goto definition #0
    use super::Sha<caret>peGeometry;
---
<sel>pub trait ShapeGeometry<T> {
    fn boundary(self: T) -> u64;
    fn area(self: T) -> u64;
}</sel>

//! > Goto definition #1
    impl RectangleGeometry of ShapeGe<caret>ometry<Rectangle> {
---
<sel>pub trait ShapeGeometry<T> {
    fn boundary(self: T) -> u64;
    fn area(self: T) -> u64;
}</sel>

//! > Goto definition #2
    impl RectangleGeometry of ShapeGeometry<Recta<caret>ngle> {
---
    <sel>#[derive(Copy, Drop)]
    pub struct Rectangle {
        pub height: u64,
        pub width: u64,
    }</sel>

//! > Goto definition #3
        fn boun<caret>dary(self: Rectangle) -> u64 {
---
    <sel>impl RectangleGeometry of ShapeGeometry<Rectangle> {
        fn boundary(self: Rectangle) -> u64 {
            2 * (self.height + self.width)
        }
        fn area(self: Rectangle) -> u64 {
            self.height * self.width
        }
    }</sel>

//! > Goto definition #4
        fn boundary(self: Recta<caret>ngle) -> u64 {
---
    <sel>#[derive(Copy, Drop)]
    pub struct Rectangle {
        pub height: u64,
        pub width: u64,
    }</sel>

//! > Goto definition #5
    let area = ShapeGeo<caret>metry::area(rect);
---
<sel>pub trait ShapeGeometry<T> {
    fn boundary(self: T) -> u64;
    fn area(self: T) -> u64;
}</sel>

//! > Goto definition #6
    let area = ShapeGeometry::ar<caret>ea(rect);
---
    <sel>fn area(self: T) -> u64;</sel>
