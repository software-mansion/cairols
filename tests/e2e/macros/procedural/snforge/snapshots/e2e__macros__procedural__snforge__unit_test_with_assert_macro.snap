---
source: tests/e2e/macros/procedural/snforge/mod.rs
description: "// → test_package/Scarb.toml\n[package]\nname = \"test_package\"\nversion = \"0.1.0\"\nedition = \"2024_07\"\n\n[tool.scarb]\nallow-prebuilt-plugins = [\"snforge_scarb_plugin\"]\n\n[dev-dependencies]\nassert_macros = \"2.10.0\"\nsnforge_std = \"0.37.0\"\nsnforge_scarb_plugin = \"0.37.0\"\n\n// → test_package/src/lib.cairo\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn test_nothing() {\n        assert_eq!(1, 1, \"Who knows\");\n    }\n}"
expression: report
---
[[expansions]]
analyzed_lines = """
    #[test]<caret>
"""
generated_code = """
// lib.cairo
// ---------

#[test]
fn test_nothing() {
    {
        let __lhs_value_for_assert_eq_macro__ = @(1);
        let __rhs_value_for_assert_eq_macro__ = @(1);
        if !core::traits::PartialEq::eq(
            __lhs_value_for_assert_eq_macro__, __rhs_value_for_assert_eq_macro__,
        ) {
            let mut __formatter_for_assert_eq_macro_: core::fmt::Formatter =
                core::traits::Default::default();
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer,
                        0x617373657274696f6e206031203d3d203160206661696c6564,
                        25,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x3a20, 2,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x57686f206b6e6f77730a, 10,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x313a20, 3,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                core::fmt::Debug::fmt(
                    __lhs_value_for_assert_eq_macro__, ref __formatter_for_assert_eq_macro_,
                ),
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0xa313a20, 4,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                core::fmt::Debug::fmt(
                    __rhs_value_for_assert_eq_macro__, ref __formatter_for_assert_eq_macro_,
                ),
            );
            core::panics::panic_with_byte_array(@__formatter_for_assert_eq_macro_.buffer)
        }
    };
}

// proc_macro_test
// ---------------

#[snforge_internal_test_executable]
#[__internal_config_statement]
fn test_nothing() {
    {
        let __lhs_value_for_assert_eq_macro__ = @(1);
        let __rhs_value_for_assert_eq_macro__ = @(1);
        if !core::traits::PartialEq::eq(
            __lhs_value_for_assert_eq_macro__, __rhs_value_for_assert_eq_macro__,
        ) {
            let mut __formatter_for_assert_eq_macro_: core::fmt::Formatter =
                core::traits::Default::default();
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer,
                        0x617373657274696f6e206031203d3d203160206661696c6564,
                        25,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x3a20, 2,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x57686f206b6e6f77730a, 10,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x313a20, 3,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                core::fmt::Debug::fmt(
                    __lhs_value_for_assert_eq_macro__, ref __formatter_for_assert_eq_macro_,
                ),
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0xa313a20, 4,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                core::fmt::Debug::fmt(
                    __rhs_value_for_assert_eq_macro__, ref __formatter_for_assert_eq_macro_,
                ),
            );
            core::panics::panic_with_byte_array(@__formatter_for_assert_eq_macro_.buffer)
        }
    };
}

// proc_macro___internal_config_statement
// --------------------------------------

#[snforge_internal_test_executable]
fn test_nothing() {
    if snforge_std::_internals::_is_config_run() {
        return;
    }
    {
        let __lhs_value_for_assert_eq_macro__ = @(1);
        let __rhs_value_for_assert_eq_macro__ = @(1);
        if !core::traits::PartialEq::eq(
            __lhs_value_for_assert_eq_macro__, __rhs_value_for_assert_eq_macro__,
        ) {
            let mut __formatter_for_assert_eq_macro_: core::fmt::Formatter =
                core::traits::Default::default();
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer,
                        0x617373657274696f6e206031203d3d203160206661696c6564,
                        25,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x3a20, 2,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x57686f206b6e6f77730a, 10,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x313a20, 3,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                core::fmt::Debug::fmt(
                    __lhs_value_for_assert_eq_macro__, ref __formatter_for_assert_eq_macro_,
                ),
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0xa313a20, 4,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                core::fmt::Debug::fmt(
                    __rhs_value_for_assert_eq_macro__, ref __formatter_for_assert_eq_macro_,
                ),
            );
            core::panics::panic_with_byte_array(@__formatter_for_assert_eq_macro_.buffer)
        }
    };
}
"""

[[expansions]]
analyzed_lines = '''
        <caret>assert_eq!(1, 1, "Who knows");
'''
generated_code = '''
// lib.cairo
// ---------

{
    let __lhs_value_for_assert_eq_macro__ = @(1);
    let __rhs_value_for_assert_eq_macro__ = @(1);
    if !core::traits::PartialEq::eq(
        __lhs_value_for_assert_eq_macro__, __rhs_value_for_assert_eq_macro__,
    ) {
        let mut __formatter_for_assert_eq_macro_: core::fmt::Formatter =
            core::traits::Default::default();
        core::result::ResultTrait::<
            (), core::fmt::Error,
        >::unwrap(write!(__formatter_for_assert_eq_macro_, "assertion `\u{31} == \u{31}` failed"));
        core::result::ResultTrait::<
            (), core::fmt::Error,
        >::unwrap(write!(__formatter_for_assert_eq_macro_, ": "));
        core::result::ResultTrait::<
            (), core::fmt::Error,
        >::unwrap(writeln!(__formatter_for_assert_eq_macro_, "Who knows"));
        core::result::ResultTrait::<
            (), core::fmt::Error,
        >::unwrap(write!(__formatter_for_assert_eq_macro_, "\u{31}: "));
        core::result::ResultTrait::<
            (), core::fmt::Error,
        >::unwrap(
            core::fmt::Debug::fmt(
                __lhs_value_for_assert_eq_macro__, ref __formatter_for_assert_eq_macro_,
            ),
        );
        core::result::ResultTrait::<
            (), core::fmt::Error,
        >::unwrap(write!(__formatter_for_assert_eq_macro_, "\n\u{31}: "));
        core::result::ResultTrait::<
            (), core::fmt::Error,
        >::unwrap(
            core::fmt::Debug::fmt(
                __rhs_value_for_assert_eq_macro__, ref __formatter_for_assert_eq_macro_,
            ),
        );
        core::panics::panic_with_byte_array(@__formatter_for_assert_eq_macro_.buffer)
    }
}
'''
