---
source: tests/e2e/macros/procedural/snforge/mod.rs
expression: report
---
[[expansions]]
analyzed_lines = """
    #[test]<caret>
"""
generated_code = """
// lib.cairo
// ---------

#[test]
fn test_nothing() {
    {
        let __lhs_value_for_assert_eq_macro__ = 1;
        let __rhs_value_for_assert_eq_macro__ = 1;
        if !(__lhs_value_for_assert_eq_macro__ == __rhs_value_for_assert_eq_macro__) {
            let mut __formatter_for_assert_eq_macro_: core::fmt::Formatter =
                core::traits::Default::default();
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer,
                        0x617373657274696f6e206031203d3d203160206661696c6564,
                        25,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x3a20, 2,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x57686f206b6e6f77730a, 10,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    let __write_macro_arg0__ = @(__lhs_value_for_assert_eq_macro__);
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x313a20, 3,
                    );
                    match core::fmt::Debug::fmt(
                        __write_macro_arg0__, ref __formatter_for_assert_eq_macro_,
                    ) {
                        core::result::Result::Ok(_) => {
                            core::byte_array::ByteArrayTrait::append_word(
                                ref __formatter_for_assert_eq_macro_.buffer, 0xa, 1,
                            );
                            core::result::Result::<(), core::fmt::Error>::Ok(())
                        },
                        core::result::Result::Err(err) => core::result::Result::Err(err),
                    }
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    let __write_macro_arg0__ = @(__rhs_value_for_assert_eq_macro__);
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x313a20, 3,
                    );
                    match core::fmt::Debug::fmt(
                        __write_macro_arg0__, ref __formatter_for_assert_eq_macro_,
                    ) {
                        core::result::Result::Ok(_) => {
                            core::result::Result::<(), core::fmt::Error>::Ok(())
                        },
                        core::result::Result::Err(err) => core::result::Result::Err(err),
                    }
                },
            );
            core::panics::panic_with_byte_array(@__formatter_for_assert_eq_macro_.buffer)
        }
    };
}

// proc_macro_test
// ---------------

#[snforge_internal_test_executable]
#[__internal_config_statement]
fn test_nothing() {
    {
        let __lhs_value_for_assert_eq_macro__ = 1;
        let __rhs_value_for_assert_eq_macro__ = 1;
        if !(__lhs_value_for_assert_eq_macro__ == __rhs_value_for_assert_eq_macro__) {
            let mut __formatter_for_assert_eq_macro_: core::fmt::Formatter =
                core::traits::Default::default();
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer,
                        0x617373657274696f6e206031203d3d203160206661696c6564,
                        25,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x3a20, 2,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x57686f206b6e6f77730a, 10,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    let __write_macro_arg0__ = @(__lhs_value_for_assert_eq_macro__);
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x313a20, 3,
                    );
                    match core::fmt::Debug::fmt(
                        __write_macro_arg0__, ref __formatter_for_assert_eq_macro_,
                    ) {
                        core::result::Result::Ok(_) => {
                            core::byte_array::ByteArrayTrait::append_word(
                                ref __formatter_for_assert_eq_macro_.buffer, 0xa, 1,
                            );
                            core::result::Result::<(), core::fmt::Error>::Ok(())
                        },
                        core::result::Result::Err(err) => core::result::Result::Err(err),
                    }
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    let __write_macro_arg0__ = @(__rhs_value_for_assert_eq_macro__);
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x313a20, 3,
                    );
                    match core::fmt::Debug::fmt(
                        __write_macro_arg0__, ref __formatter_for_assert_eq_macro_,
                    ) {
                        core::result::Result::Ok(_) => {
                            core::result::Result::<(), core::fmt::Error>::Ok(())
                        },
                        core::result::Result::Err(err) => core::result::Result::Err(err),
                    }
                },
            );
            core::panics::panic_with_byte_array(@__formatter_for_assert_eq_macro_.buffer)
        }
    };
}

// proc_macro___internal_config_statement
// --------------------------------------

#[snforge_internal_test_executable]
fn test_nothing() {
    if snforge_std::_internals::_is_config_run() {
        return;
    }
    {
        let __lhs_value_for_assert_eq_macro__ = 1;
        let __rhs_value_for_assert_eq_macro__ = 1;
        if !(__lhs_value_for_assert_eq_macro__ == __rhs_value_for_assert_eq_macro__) {
            let mut __formatter_for_assert_eq_macro_: core::fmt::Formatter =
                core::traits::Default::default();
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer,
                        0x617373657274696f6e206031203d3d203160206661696c6564,
                        25,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x3a20, 2,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x57686f206b6e6f77730a, 10,
                    );
                    core::result::Result::<(), core::fmt::Error>::Ok(())
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    let __write_macro_arg0__ = @(__lhs_value_for_assert_eq_macro__);
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x313a20, 3,
                    );
                    match core::fmt::Debug::fmt(
                        __write_macro_arg0__, ref __formatter_for_assert_eq_macro_,
                    ) {
                        core::result::Result::Ok(_) => {
                            core::byte_array::ByteArrayTrait::append_word(
                                ref __formatter_for_assert_eq_macro_.buffer, 0xa, 1,
                            );
                            core::result::Result::<(), core::fmt::Error>::Ok(())
                        },
                        core::result::Result::Err(err) => core::result::Result::Err(err),
                    }
                },
            );
            core::result::ResultTrait::<
                (), core::fmt::Error,
            >::unwrap(
                {
                    let __write_macro_arg0__ = @(__rhs_value_for_assert_eq_macro__);
                    core::byte_array::ByteArrayTrait::append_word(
                        ref __formatter_for_assert_eq_macro_.buffer, 0x313a20, 3,
                    );
                    match core::fmt::Debug::fmt(
                        __write_macro_arg0__, ref __formatter_for_assert_eq_macro_,
                    ) {
                        core::result::Result::Ok(_) => {
                            core::result::Result::<(), core::fmt::Error>::Ok(())
                        },
                        core::result::Result::Err(err) => core::result::Result::Err(err),
                    }
                },
            );
            core::panics::panic_with_byte_array(@__formatter_for_assert_eq_macro_.buffer)
        }
    };
}
"""

[[expansions]]
analyzed_lines = '''
        <caret>assert_eq!(1, 1, "Who knows");
'''
generated_code = """
// lib.cairo
// ---------

{
    let __lhs_value_for_assert_eq_macro__ = 1;
    let __rhs_value_for_assert_eq_macro__ = 1;
    if !(__lhs_value_for_assert_eq_macro__ == __rhs_value_for_assert_eq_macro__) {
        let mut __formatter_for_assert_eq_macro_: core::fmt::Formatter =
            core::traits::Default::default();
        core::result::ResultTrait::<
            (), core::fmt::Error,
        >::unwrap(
            {
                core::byte_array::ByteArrayTrait::append_word(
                    ref __formatter_for_assert_eq_macro_.buffer,
                    0x617373657274696f6e206031203d3d203160206661696c6564,
                    25,
                );
                core::result::Result::<(), core::fmt::Error>::Ok(())
            },
        );
        core::result::ResultTrait::<
            (), core::fmt::Error,
        >::unwrap(
            {
                core::byte_array::ByteArrayTrait::append_word(
                    ref __formatter_for_assert_eq_macro_.buffer, 0x3a20, 2,
                );
                core::result::Result::<(), core::fmt::Error>::Ok(())
            },
        );
        core::result::ResultTrait::<
            (), core::fmt::Error,
        >::unwrap(
            {
                core::byte_array::ByteArrayTrait::append_word(
                    ref __formatter_for_assert_eq_macro_.buffer, 0x57686f206b6e6f77730a, 10,
                );
                core::result::Result::<(), core::fmt::Error>::Ok(())
            },
        );
        core::result::ResultTrait::<
            (), core::fmt::Error,
        >::unwrap(
            {
                let __write_macro_arg0__ = @(__lhs_value_for_assert_eq_macro__);
                core::byte_array::ByteArrayTrait::append_word(
                    ref __formatter_for_assert_eq_macro_.buffer, 0x313a20, 3,
                );
                match core::fmt::Debug::fmt(
                    __write_macro_arg0__, ref __formatter_for_assert_eq_macro_,
                ) {
                    core::result::Result::Ok(_) => {
                        core::byte_array::ByteArrayTrait::append_word(
                            ref __formatter_for_assert_eq_macro_.buffer, 0xa, 1,
                        );
                        core::result::Result::<(), core::fmt::Error>::Ok(())
                    },
                    core::result::Result::Err(err) => core::result::Result::Err(err),
                }
            },
        );
        core::result::ResultTrait::<
            (), core::fmt::Error,
        >::unwrap(
            {
                let __write_macro_arg0__ = @(__rhs_value_for_assert_eq_macro__);
                core::byte_array::ByteArrayTrait::append_word(
                    ref __formatter_for_assert_eq_macro_.buffer, 0x313a20, 3,
                );
                match core::fmt::Debug::fmt(
                    __write_macro_arg0__, ref __formatter_for_assert_eq_macro_,
                ) {
                    core::result::Result::Ok(_) => {
                        core::result::Result::<(), core::fmt::Error>::Ok(())
                    },
                    core::result::Result::Err(err) => core::result::Result::Err(err),
                }
            },
        );
        core::panics::panic_with_byte_array(@__formatter_for_assert_eq_macro_.buffer)
    }
}
"""
