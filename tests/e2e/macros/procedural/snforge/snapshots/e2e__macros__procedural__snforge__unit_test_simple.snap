---
source: tests/e2e/macros/procedural/snforge/mod.rs
description: "// → test_package/Scarb.toml\n[package]\nname = \"test_package\"\nversion = \"0.1.0\"\nedition = \"2024_07\"\n\n[tool.scarb]\nallow-prebuilt-plugins = [\"snforge_scarb_plugin\"]\n\n[dev-dependencies]\nassert_macros = \"2.10.0\"\nsnforge_std = { version = \"0.46.0+nightly-2025-07-29\", registry = \"https://scarbs.dev/\" }\nsnforge_scarb_plugin = { version = \"0.46.0+nightly-2025-07-29\", registry = \"https://scarbs.dev/\" }\n\n// → test_package/src/lib.cairo\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn test_nothing() {\n        assert(1 == 1, 'Who knows');\n    }\n}"
expression: report
---
[[expansions]]
analyzed_lines = """
    #[test]<caret>
        <caret>assert(1 == 1, 'Who knows');
"""
generated_code = """
#[implicit_precedence(
    core::pedersen::Pedersen,
    core::RangeCheck,
    core::integer::Bitwise,
    core::ec::EcOp,
    core::poseidon::Poseidon,
    core::SegmentArena,
    core::circuit::RangeCheck96,
    core::circuit::AddMod,
    core::circuit::MulMod,
    core::gas::GasBuiltin,
    System,
)]
#[snforge_internal_test_executable]
fn test_nothing(mut _data: Span<felt252>) -> Span<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    test_nothing_return_wrapper();
    let mut arr = ArrayTrait::new();
    core::array::ArrayTrait::span(@arr)
}
fn test_nothing_return_wrapper() {
    if snforge_std::_internals::is_config_run() {
        return;
    }
    assert(1 == 1, 'Who knows');
}
"""
