---
source: tests/e2e/macros/procedural/snforge/mod.rs
description: "// → test_package/Scarb.toml\n[package]\nname = \"test_package\"\nversion = \"0.1.0\"\nedition = \"2024_07\"\n\n[dev-dependencies]\nsnforge_std = \"0.37.0\"\nsnforge_scarb_plugin = \"0.37.0\"\n\n[tool.scarb]\nallow-prebuilt-plugins = [\"snforge_scarb_plugin\"]\n\n[[tool.snforge.fork]]\nname = \"SEPOLIA_LATEST\"\nurl = \"https://starknet-sepolia.public.blastapi.io/rpc/v0_7\"\nblock_id.tag = \"latest\"\n\n// → test_package/lib.cairo\n\n\n// → test_package/tests/test.cairo\n#[test]\n#[fork(\"SEPOLIA_LATEST\")]\n#[fuzzer(runs: 100, seed: 0x1234)]\nfn test_nothing(x: felt252) {\n    assert(x == x, 'Who knows');\n}"
expression: report
---
[[expansions]]
analyzed_lines = """
#[test]<caret>
#[fork(<caret>"SEPOLIA_LATEST")]
#[fuzzer(runs: 100,<caret> seed: 0x1234)]
    <caret>assert(x == x, 'Who knows');
"""
generated_code = """
#[snforge_internal_test_executable]
fn test_nothing(x: felt252) {
    if snforge_std::_internals::_is_config_run() {
        let mut data = {
            let mut __array_builder_macro_result__ = core::array::ArrayTrait::new();
            __array_builder_macro_result__
        };

        snforge_std::_config_types::ForkConfig::Named("SEPOLIA_LATEST").serialize(ref data);

        starknet::testing::cheatcode::<'set_config_fork'>(data.span());

        let mut data = {
            let mut __array_builder_macro_result__ = core::array::ArrayTrait::new();
            __array_builder_macro_result__
        };

        snforge_std::_config_types::FuzzerConfig {
            seed: Option::Some(0x1234), runs: Option::Some(0x64),
        }
            .serialize(ref data);

        starknet::testing::cheatcode::<'set_config_fuzzer'>(data.span());

        return;
    }

    assert(x == x, 'Who knows');
}
"""
