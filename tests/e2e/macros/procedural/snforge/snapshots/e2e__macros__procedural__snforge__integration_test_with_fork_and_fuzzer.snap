---
source: tests/e2e/macros/procedural/snforge/mod.rs
expression: report
---
[[expansions]]
analyzed_lines = '''
#[test]<caret>
#[fork(<caret>"SEPOLIA_LATEST")]
#[fuzzer(runs: 100,<caret> seed: 0x1234)]
    <caret>assert(x == x, 'Who knows');
'''
generated_code = '''
// test.cairo
// ----------

#[test]
#[fork("SEPOLIA_LATEST")]
#[fuzzer(runs: 100, seed: 0x1234)]
fn test_nothing(x: felt252) {
    assert(x == x, 'Who knows');
}

// proc_macro_test
// ---------------

#[snforge_internal_test_executable]
#[__internal_config_statement]
#[fork("SEPOLIA_LATEST")]
#[fuzzer(runs: 100, seed: 0x1234)]
fn test_nothing(x: felt252) {
    assert(x == x, 'Who knows');
}

// proc_macro___internal_config_statement
// --------------------------------------

#[snforge_internal_test_executable]
#[fork("SEPOLIA_LATEST")]
#[fuzzer(runs: 100, seed: 0x1234)]
fn test_nothing(x: felt252) {
    if snforge_std::_internals::_is_config_run() {
        return;
    }

    assert(x == x, 'Who knows');
}

// proc_macro_fork
// ---------------

#[snforge_internal_test_executable]
#[fuzzer(runs: 100, seed: 0x1234)]
fn test_nothing(x: felt252) {
    if snforge_std::_internals::_is_config_run() {
        let mut data = {
            let mut __array_builder_macro_result__ = core::array::ArrayTrait::new();
            __array_builder_macro_result__
        };

        snforge_std::_config_types::ForkConfig::Named("SEPOLIA_LATEST").serialize(ref data);

        starknet::testing::cheatcode::<'set_config_fork'>(data.span());

        return;
    }

    assert(x == x, 'Who knows');
}

// proc_macro_fuzzer
// -----------------

#[snforge_internal_test_executable]
fn test_nothing(x: felt252) {
    if snforge_std::_internals::_is_config_run() {
        let mut data = {
            let mut __array_builder_macro_result__ = core::array::ArrayTrait::new();
            __array_builder_macro_result__
        };

        snforge_std::_config_types::ForkConfig::Named("SEPOLIA_LATEST").serialize(ref data);

        starknet::testing::cheatcode::<'set_config_fork'>(data.span());

        let mut data = {
            let mut __array_builder_macro_result__ = core::array::ArrayTrait::new();
            __array_builder_macro_result__
        };

        snforge_std::_config_types::FuzzerConfig {
            seed: Option::Some(0x1234), runs: Option::Some(0x64),
        }
            .serialize(ref data);

        starknet::testing::cheatcode::<'set_config_fuzzer'>(data.span());

        return;
    }

    assert(x == x, 'Who knows');
}
'''
