---
source: tests/e2e/macros/procedural/snforge/mod.rs
description: "// → test_package/Scarb.toml\n[package]\nname = \"test_package\"\nversion = \"0.1.0\"\nedition = \"2024_07\"\n\n[dev-dependencies]\nsnforge_std = { version = \"0.46.0+nightly-2025-07-29\", registry = \"https://scarbs.dev/\" }\nsnforge_scarb_plugin = { version = \"0.46.0+nightly-2025-07-29\", registry = \"https://scarbs.dev/\" }\n\n[tool.scarb]\nallow-prebuilt-plugins = [\"snforge_scarb_plugin\"]\n\n[[tool.snforge.fork]]\nname = \"SEPOLIA_LATEST\"\nurl = \"https://starknet-sepolia.public.blastapi.io/rpc/v0_7\"\nblock_id.tag = \"latest\"\n\n// → test_package/lib.cairo\n\n\n// → test_package/tests/test.cairo\n#[test]\n#[fork(\"SEPOLIA_LATEST\")]\n#[fuzzer(runs: 100, seed: 0x1234)]\nfn test_nothing(x: felt252) {\n    assert(x == x, 'Who knows');\n}"
expression: report
---
[[expansions]]
analyzed_lines = """
#[test]<caret>
#[fork(<caret>"SEPOLIA_LATEST")]
#[fuzzer(runs: 100,<caret> seed: 0x1234)]
    <caret>assert(x == x, 'Who knows');
"""
generated_code = """
#[implicit_precedence(
    core::pedersen::Pedersen,
    core::RangeCheck,
    core::integer::Bitwise,
    core::ec::EcOp,
    core::poseidon::Poseidon,
    core::SegmentArena,
    core::circuit::RangeCheck96,
    core::circuit::AddMod,
    core::circuit::MulMod,
    core::gas::GasBuiltin,
    System,
)]
#[snforge_internal_test_executable]
fn test_nothing(mut _data: Span<felt252>) -> Span<felt252> {
    core::internal::require_implicit::<System>();
    core::internal::revoke_ap_tracking();
    core::option::OptionTraitImpl::expect(core::gas::withdraw_gas(), 'Out of gas');
    core::option::OptionTraitImpl::expect(
        core::gas::withdraw_gas_all(core::gas::get_builtin_costs()), 'Out of gas',
    );
    test_nothing_return_wrapper();
    let mut arr = ArrayTrait::new();
    core::array::ArrayTrait::span(@arr)
}
fn test_nothing_return_wrapper() {
    if snforge_std::_internals::is_config_run() {
        let mut data = {
            let mut __array_builder_macro_result__ = core::array::ArrayTrait::new();
            __array_builder_macro_result__
        };
        snforge_std::_internals::config_types::ForkConfig::Named("SEPOLIA_LATEST")
            .serialize(ref data);
        starknet::testing::cheatcode::<'set_config_fork'>(data.span());
        let mut data = {
            let mut __array_builder_macro_result__ = core::array::ArrayTrait::new();
            __array_builder_macro_result__
        };
        snforge_std::_internals::config_types::FuzzerConfig {
            seed: Option::Some(0x1234), runs: Option::Some(0x64),
        }
            .serialize(ref data);
        starknet::testing::cheatcode::<'set_config_fuzzer'>(data.span());
        test_nothing_return_wrapper_actual_body(snforge_std::fuzzable::Fuzzable::blank());
        return;
    }
    let x: felt252 = snforge_std::fuzzable::Fuzzable::generate();
    snforge_std::_internals::save_fuzzer_arg(@x);
    test_nothing_return_wrapper_actual_body(x);
}
fn test_nothing_return_wrapper_actual_body(x: felt252) {
    if snforge_std::_internals::is_config_run() {
        return;
    }
    assert(x == x, 'Who knows');
}
"""
